env:
  # Optional value, can manually trigger input for patch/minor/major to control version bump
  VERSION_BUMP: ${{ github.event.inputs.version_bump || 'patch' }} 

on:
  push:
    branches:
      - main
      - 'feature-*'
      - 'feat-*'
    tags:
      - 'v*'
  
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump level"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Check out the code repository
      - uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org/'

      # Cache Yarn dependencies
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      # Check Node.js version
      - name: Check Node version
        run: node --version

      # Check Yarn version
      - name: Check Yarn version
        run: yarn --version

      # Install project dependencies
      - name: Install dependencies
        run: yarn install

      # Build the project
      - name: Build project
        run: yarn build

      # Determine version number and tag
      - name: Determine version
        id: version
        run: |
          # If the current trigger is a Git tag with a version number
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Extract the version number from the tag
            VERSION="${GITHUB_REF#refs/tags/v}"
            # Set the npm publish tag to "latest"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
            # Mark as a tagged version
            echo "tagged=true" >> $GITHUB_OUTPUT
          else
            # Fetch all published versions from npm
            VERSIONS=$(npm view @officesdk/rpc versions --json || echo "[]")
            echo "ðŸ“¦ existing versions: $VERSIONS"
            # Find the latest version
            LATEST_VERSION=$(echo "$VERSIONS" | jq -r '.[]' | sort -rV | head -n1)
            # If no version is found, default to "0.0.0"
            if [[ -z "$LATEST_VERSION" ]]; then
              LATEST_VERSION="0.0.0"
            fi

            # Use "beta" tag for main branch, otherwise use "alpha"
            if [[ "$GITHUB_REF" == refs/heads/main ]]; then
              PRE_TAG="beta"
            else
              PRE_TAG="alpha"
            fi

            # If the latest version is already a pre-release (with alpha or beta tag)
            if [[ "$LATEST_VERSION" == *"-${PRE_TAG}."* ]]; then
              # Extract the base version and current pre-release number
              BASE_VERSION=$(echo "$LATEST_VERSION" | sed -E "s/-${PRE_TAG}\.[0-9]+$//")
              LATEST_NUM=$(echo "$LATEST_VERSION" | sed -E "s/.*-${PRE_TAG}\.([0-9]+)$/\1/")
              # Increment the pre-release number
              NEXT_NUM=$((LATEST_NUM + 1))
              VERSION="${BASE_VERSION}-${PRE_TAG}.${NEXT_NUM}"
            else
              # If not a pre-release, update the version based on VERSION_BUMP
              MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
              MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
              PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)

              case "${VERSION_BUMP}" in
                major)
                  # Increment major version, reset minor and patch
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                minor)
                  # Increment minor version, reset patch
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                patch|*)
                  # Increment patch version
                  PATCH=$((PATCH + 1))
                  ;;
              esac

              # Generate a new pre-release version
              VERSION="${MAJOR}.${MINOR}.${PATCH}-${PRE_TAG}.0"
            fi

            # Output the version number and npm tag
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "npm_tag=$PRE_TAG" >> $GITHUB_OUTPUT
            # Mark as an untagged version
            echo "tagged=false" >> $GITHUB_OUTPUT
          fi

      # Update the version number in package.json files
      - name: Bump package versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "ðŸ”§ Updating version to $VERSION"

          jq --arg v "$VERSION" '.version = $v' dist/rpc/package.json > tmp.rpc.json && mv tmp.rpc.json dist/rpc/package.json
          jq --arg v "$VERSION" '.version = $v | .dependencies["@officesdk/rpc"] = $v' dist/web/package.json > tmp.web.json && mv tmp.web.json dist/web/package.json

      # Commit version changes to the Git repository
      - name: Commit bumped versions
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -f dist/rpc/package.json dist/web/package.json
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push

      # Publish the RPC package to npm
      - name: Publish RPC Package
        run: |
          cd dist/rpc
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish the WEB package to npm
      - name: Publish WEB Package
        run: |
          cd dist/web
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
